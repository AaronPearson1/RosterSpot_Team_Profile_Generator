// Import all classes and packages
const fileSystem = require("fs");
const Coach = require("./lib/coach");
const Point= require("./lib/point");
const Wing = require("./lib/wing");
const inquirer = require("inquirer");
const util = require("util");
const { generateHtml } = require("./src/generateHtml");
const writeFile = util.promisify(fileSystem.writeFile);

// An array for storing all player information generated by the user
let players = [];

// A recursive function for asking if the user would like
// to add a new player until the user answers no.
async function addPlayers() {
  const response = await inquirer.prompt({
    type: "list",
    message: "Would you like to add another Player?",
    name: "playerType",
    choices: ["Point", "Wing", "No"],
  });

  //If else statement for asking questions specific to the new players role
  if (response.playerType === "Point") {
    await addPointQuestions().then((response) => {
      const point = new Point(response);
      players.push(point);
    });
  } else if (response.playerType === "Wing") {
    await addWingQuestions().then((response) => {
      const wing = new Wing(response);
      players.push(wing);
    });
  } else {
    return;
  }
  //Run addPlayer function again if the use wants to add another player
  await addPlayer();
}

// A function for asking questions specific to the coach role,
// then 
async function addCoachQuestions() {
  const response = await inquirer.prompt([
    {
      type: "input",
      message: "Enter the team coach's name:",
      name: "name",
    },
    {
      type: "input",
      message: "Enter the team coach's player ID:",
      name: "id",
    },
    {
      type: "input",
      message: "Enter the team coach's email address:",
      name: "email",
    },
    {
      type: "input",
      message: "Enter the team coach's office number:",
      name: "officeNumber",
    },
  ]);
  const coach = new Coach(response);
  players.push(coach);
}

// A function for asking questions specific to the point role
async function addPointQuestions() {
  const response = await inquirer.prompt([
    {
      type: "input",
      message: "Enter the point's name:",
      name: "name",
    },
    {
      type: "input",
      message: "Enter the point's player ID:",
      name: "id",
    },
    {
      type: "input",
      message: "Enter the point's email address:",
      name: "email",
    },
    {
      type: "input",
      message: "Enter the point's gitHub username:",
      name: "github",
    },
  ]);
  return response;
}

// A function for asking questions specific to the wing role
async function addWingQuestions() {
  const response = await inquirer.prompt([
    {
      type: "input",
      message: "Enter the wing's name:",
      name: "name",
    },
    {
      type: "input",
      message: "Enter the wing's player ID:",
      name: "id",
    },
    {
      type: "input",
      message: "Enter the wing's email address:",
      name: "email",
    },
    {
      type: "input",
      message: "Enter the wing's school:",
      name: "school",
    },
  ]);
  return response;
}

// Runs functions to generate players, then passes the players array to
// the generateHtml function and writes the result to a html file
async function init() {
  await addCoachQuestions();
  await addPlayer();
  writeFile("dist/index.html", generateHtml(players));
}

init();
